let min = '20.25'
let max = '150.00208'
// issue on -1 - 0.22222222, -1000.229338, -88888.88888888, -99.99999999999991 about slice at was wrong position
let step1 = '0.22222222'
// issue on 1.25, -1 + -0.22222222, -1000.229338, -88888.88888888, -99.99999999999991 about slice at was wrong position
let step2 = '-0.22222222'
let values = ['0', '0.1', '0.55', '1.25', '30.0001005000008', '-1', '-1000.229338', '-88888.88888888','-99.99999999999991']
values.forEach( val => calc(val, step1))
values.forEach( val => calc(val, step2))
function calc (val, step) {
    // separate values via dot
    let [val_i = '0', val_f = '0'] = val.split('.')
    let [min_i = '0', min_f = '0'] = min.split('.')
    let [max_i = '0', max_f = '0'] = max.split('.')
    let [step_i = '0', step_f = '0'] = step.split('.')
    // find each length of variable 
    let val_f_len = val_f.length
    let min_f_len = min_f.length
    let max_f_len = max_f.length
    let step_f_len = step_f.length
    let val_i_len = val_i.length
    let step_i_len = step_i.length
    // make an array for lengths
    let lens = [val_f_len, step_f_len]
    // find max of lengths
    let longest = Math.max(val_f_len, step_f_len)
    // add 0 in the end of value
    let padEnd = (v, s) => { 
        return `${v}${s.padEnd(longest, '0')}`
    }
    let VAL = padEnd(val_i, val_f)
    let MIN = padEnd(min_i, min_f)
    let MAX = padEnd(max_i, max_f)
    let STEP = padEnd(step_i, step_f)
    let VAL_len = !VAL.indexOf('-') ? VAL.slice(1).length : VAL.length
    let STEP_len = !STEP.indexOf('-') ? STEP.slice(1).length : STEP.length

    console.log({int: val_i, fra: val_f, big_val: VAL, lens, longest})
    console.log({VAL, MIN, MAX, STEP})
    console.log({val_i: val_i.length, min_i: min_i.length, max_i: max_i.length, step_i: step_i.length})
    console.log({VAL_len, MIN_len: MIN.length, MAX_len: MAX.length, STEP_len})
    let update1 = `${BigInt(VAL) + BigInt(STEP)}`
    let update2 = `${BigInt(VAL) - BigInt(STEP)}`
    _val(update1)
    _val(update2)

    function _val (v) {
        let minus = !v.indexOf('-')
        let v_len = minus ? v.slice(1).length : v.length
        let new_v = minus ? v.slice(1) : v
        let space = STEP_len > v_len
        let corrected = space ? new_v.padStart(STEP_len, '0') : new_v
        let whole_len = space ? STEP_len : v_len
        console.table({"-": minus, new: new_v, new_len: v_len, old: VAL, old_len: VAL_len, step: STEP, step_len: STEP_len, space, whole_len, corrected });
        const add_minus = minus ? '-' : ''
        // if fraction in value and step are equal zeros
        if (val_f === '0' && step_f === '0' ) {
            var slice_end = new_v.length - 1
            // if integer not equal to zero
            var integer = new_v.slice(0, slice_end - 1) != 0 ? `${new_v.slice(0, slice_end - 1)}` : '0'
            // if fraction not equal to zero
            var fraction = new_v.slice(slice_end) != 0 ? `.${new_v.slice(slice_end)}` : ''
            console.log('check if integer or fraction is equal to zero', {int: new_v.slice(0, slice_end) == 0, fra: new_v.slice(slice_end) == 0} );
            console.log('integer will display zero, and fraction will remove')
        }
        // if fraction in value and step are great than zero
        else if (val_f_len > 0 || step_f_len > 0) {
            console.log({step_f_len, whole_len, new_v, new_v_len: v_len})
            var slice_end = STEP_len - v_len > 0 && val_i_len === 1 ? STEP_len - v_len : val_i_len > step_i_len ? val_i_len : step_i_len
            console.log(v_len, STEP_len, VAL_len, val_i_len, step_i_len);
            console.log('slice at', slice_end );
            var integer = corrected.slice(0, slice_end)[0] != '0' ? `${new_v.slice(0, slice_end)}` : '0'
            var fraction = STEP_len - v_len > 0 && v_len === step_f_len ? `.${new_v}` : val < 0 ? `.${corrected.slice(slice_end - 1)}` : `.${corrected.slice(slice_end)}`
        }
        let update = `${add_minus}${integer}${fraction}`
        console.log(update)
        return update
    }
}